#!/bin/bash

RUNNER_SCRIPT_DIR=/usr/sbin
RUNNER_SCRIPT=${0##*/}

RUNNER_BASE_DIR=/usr/lib/riak
RUNNER_ETC_DIR=/etc/riak
RUNNER_LIB_DIR=/usr/lib/riak
RUNNER_LOG_DIR=/var/log/riak
RUNNER_USER=riak

# Make sure this script is running as the appropriate user
if [ "$RUNNER_USER" -a "x$LOGNAME" != "x$RUNNER_USER" ]; then
    type -p sudo > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "sudo doesn't appear to be installed and your EUID isn't $RUNNER_USER" 1>&2
        exit 1
    fi
    #echo "Attempting to restart script through sudo -u $RUNNER_USER"
    exec sudo -u $RUNNER_USER -i $RUNNER_SCRIPT_DIR/$RUNNER_SCRIPT $@
fi

# Make sure CWD is set to runner base dir
cd $RUNNER_BASE_DIR

# Extract the target node name from node.args
NAME_ARG=`grep '\-[s]*name' $RUNNER_ETC_DIR/vm.args`
if [ -z "$NAME_ARG" ]; then
    echo "vm.args needs to have either -name or -sname parameter."
    exit 1
fi

# Learn how to specify node name for connection from remote nodes
echo "$NAME_ARG" | grep '^-sname' > /dev/null 2>&1
if [ "X$?" = "X0" ]; then
    NAME_PARAM="-sname"
    NAME_HOST=""
else
    NAME_PARAM="-name"
    echo "$NAME_ARG" | grep '@.*' > /dev/null 2>&1
    if [ "X$?" = "X0" ]; then
        NAME_HOST=`echo "${NAME_ARG}" | sed -e 's/.*\(@.*\)$/\1/'`
    else
        NAME_HOST=""
    fi
fi

# Extract the target cookie
COOKIE_ARG=`grep '\-setcookie' $RUNNER_ETC_DIR/vm.args`
if [ -z "$COOKIE_ARG" ]; then
    echo "vm.args needs to have a -setcookie parameter."
    exit 1
fi

# Identify the script name
SCRIPT=`basename $0`

# Parse out release and erts info
START_ERL=`cat $RUNNER_BASE_DIR/releases/start_erl.data`
ERTS_VSN=${START_ERL% *}
APP_VSN=${START_ERL#* }

# Add ERTS bin dir to our path
ERTS_PATH=$RUNNER_BASE_DIR/erts-$ERTS_VSN/bin

# Setup command to control the node
NODETOOL="$ERTS_PATH/escript $ERTS_PATH/nagtool $NAME_ARG $COOKIE_ARG"

# Make sure the local node IS running
RES=`$NODETOOL ping`
if [ "$RES" != "pong" ]; then
    echo "CRITICAL: Node is not running!"
    exit 2
fi

# Check the first argument for instructions
case "$1" in
    up)
        if [ $# -ne 1 ]; then
            echo "WARNING: Usage: $SCRIPT up"
            exit 1
        fi

        shift

        $NODETOOL nagios_rpc riak_nagios check_riak_up $@
        ;;

    repl-servers)
        if [ $# -ne 1 ]; then
            echo "WARNING: Usage: $SCRIPT repl-servers"
            exit 1
        fi

        shift

        $NODETOOL nagios_rpc riak_nagios check_repl_servers $@
        ;;

    repl-clients)
        if [ $# -ne 1 ]; then
            echo "WARNING: Usage: $SCRIPT repl-clients"
            exit 1
        fi

        shift

        $NODETOOL nagios_rpc riak_nagios check_repl_clients $@
        ;;

    repl-server)
        if [ $# -ne 2 ]; then
            echo "WARNING: Usage: $SCRIPT repl-server [site]"
            exit 1
        fi

        shift
        $NODETOOL nagios_rpc riak_nagios check_repl_server $@
        ;;


    repl-client)
        if [ $# -ne 2 ]; then
            echo "WARNING: Usage: $SCRIPT repl-client [site]"
            exit 1
        fi

        shift
        $NODETOOL nagios_rpc riak_nagios check_repl_client $@
        ;;

    ports)
        if [ $# -gt 3 ]; then
            echo "WARNING: Usage: $SCRIPT ports [limit] [critical limit]"
            exit 1
        fi

        #default limit if not specified
        LIMIT=${2:-5000}
        CRITLIM=${3:-$(($LIMIT * 2))}

        $NODETOOL nagios_rpc riak_nagios check_ports $LIMIT $CRITLIM
        ;;

    *)
        echo "Usage: $SCRIPT { up | repl-servers | repl-clients | repl-server [site] | repl-client [site] | ports [limit] [critical limit] }"
        exit 1
        ;;
esac
